#dating_services.py

import json
import numpy as np
from typing import List, Dict, Any, Optional
from sentence_transformers import SentenceTransformer
import asyncio
import logging
from pathlib import Path

from app.core.config import settings
from app.core.agents import QueryEnhancerAgent, FilterExtractorAgent
from app.core.tasks import EmbeddingTask, FilterTask, MatchScoringTask

logger = logging.getLogger(__name__)

class DatingService:
    """Main service for dating app functionality"""
    
    def __init__(self):
        self.embedding_model = None
        self.users: List[Dict[str, Any]] = []
        self.user_embeddings: Optional[np.ndarray] = None
        self.user_texts: List[str] = []
        
        # Initialize agents
        self.query_enhancer = QueryEnhancerAgent()
        self.filter_extractor = FilterExtractorAgent()
        
        # Initialize tasks
        self.embedding_task = None
        self.filter_task = FilterTask()
        self.scoring_task = MatchScoringTask()
    
    async def initialize(self):
        """Initialize the dating service"""
        logger.info("Initializing Dating Service...")
        
        # Load embedding model
        await self._load_embedding_model()
        
        # Load user data
        await self._load_users()
        
        # Generate embeddings
        await self._generate_embeddings()
        
        logger.info("Dating Service initialized successfully")
    
    async def _load_embedding_model(self):
        """Load the sentence transformer model"""
        loop = asyncio.get_event_loop()
        self.embedding_model = await loop.run_in_executor(
            None, 
            SentenceTransformer, 
            settings.embedding_model_name
        )
        self.embedding_task = EmbeddingTask(self.embedding_model)
        logger.info(f"Loaded embedding model: {settings.embedding_model_name}")
    
    async def _load_users(self):
        """Load users from JSON file"""
        users_path = Path(settings.users_json_path)
        
        if not users_path.exists():
            logger.warning(f"Users file not found: {users_path}")
            self.users = []
            return
        
        try:
            with open(users_path, 'r', encoding='utf-8') as file:
                self.users = json.load(file)
            logger.info(f"Loaded {len(self.users)} users")
        except Exception as e:
            logger.error(f"Error loading users: {e}")
            self.users = []
    
    async def _generate_embeddings(self):
        """Generate embeddings for all users"""
        if not self.users:
            return
        
        self.user_texts = []
        for user in self.users:
            # Create searchable text from user profile
            interests = ' '.join(user.get('interests', []))
            searchable_text = f"{user.get('bio', '')} {interests} {user.get('profession', '')} {user.get('education', '')} {user.get('location', '')} {user.get('relationship_type', '')}"
            self.user_texts.append(searchable_text)
        
        self.user_embeddings = await self.embedding_task.generate_embeddings(self.user_texts)
        logger.info("Generated embeddings for all users")
    
    async def search_profiles(self, query: str, user_id: Optional[str] = None, top_k: int = None) -> List[Dict[str, Any]]:
        """Search for profiles based on natural language query"""
        if not self.users or self.user_embeddings is None:
            return []
        
        top_k = top_k or settings.default_top_k
        
        # Enhance query
        enhanced_query = await self.query_enhancer.process(query)
        
        # Extract filters
        filters = await self.filter_extractor.process(query)
        
        # Apply filters
        filtered_users = await self.filter_task.apply_filters(self.users, filters)
        
        if not filtered_users:
            filtered_users = self.users
        
        # Get indices of filtered users
        filtered_indices = [i for i, user in enumerate(self.users) if user in filtered_users]
        
        # Generate query embedding
        query_embeddings = await self.embedding_task.generate_embeddings([enhanced_query])
        
        # Calculate similarities
        filtered_embeddings = self.user_embeddings[filtered_indices]
        similarities = await self.scoring_task.calculate_similarity(
            query_embeddings[0], 
            filtered_embeddings
        )
        
        # Rank matches
        scored_users = await self.scoring_task.rank_matches(
            filtered_users, 
            similarities, 
            top_k + (1 if user_id else 0)  # Get extra if excluding self
        )
        
        # Format results
        results = []
        for user, score in scored_users:
            # Skip searching user
            if user_id and user.get('id') == user_id:
                continue
            
            if len(results) >= top_k:
                break
            
            result = {
                'id': user.get('id'),
                'name': user.get('name'),
                'age': user.get('age'),
                'location': user.get('location'),
                'profession': user.get('profession'),
                'interests': user.get('interests', [])[:3],
                'bio': user.get('bio', '')[:100] + ('...' if len(user.get('bio', '')) > 100 else ''),
                'relationship_type': user.get('relationship_type'),
                'similarity_score': float(score),
                'match_percentage': int(score * 100)
            }
            results.append(result)
        
        return results
    
    async def get_user_by_id(self, user_id: str) -> Optional[Dict[str, Any]]:
        """Get user profile by ID"""
        for user in self.users:
            if user.get('id') == user_id:
                return user
        return None
    
    async def get_all_users(self) -> List[Dict[str, Any]]:
        """Get all users"""
        return self.users
